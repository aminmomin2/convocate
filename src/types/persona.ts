/**
 * Convocate - TypeScript Type Definitions
 * 
 * This file contains all the TypeScript interfaces and types used throughout
 * the Convocate application. These types define the data structures for
 * personas, messages, style profiles, and chat interactions.
 * 
 * The type system ensures type safety across the entire application and
 * provides clear documentation of the data structures used for AI-powered
 * digital twin creation and conversation management.
 * 
 * @author [Your Name]
 * @version 1.0.0
 * @license MIT
 */

/**
 * Basic Message Interface
 * 
 * Represents a single message in a conversation. This is the fundamental
 * data structure used throughout the application for storing and processing
 * chat messages from various sources (WhatsApp, CSV, JSON, XML).
 * 
 * @property sender - The name/identifier of who sent the message
 * @property message - The actual text content of the message
 * @property timestamp - ISO string timestamp of when the message was sent
 */
export interface Msg {
  sender: string;
  message: string;
  timestamp: string;
}

/**
 * Comprehensive Style Profile Interface
 * 
 * This is the core data structure that captures the personality and communication
 * style of a person based on AI analysis of their messages. It contains 15+ dimensions
 * of personality traits, communication patterns, and behavioral characteristics.
 * 
 * The style profile is generated by GPT-5 and used to create realistic AI responses
 * that match the original person's communication style.
 */
export interface StyleProfile {
  /** Overall tone of communication (e.g., "Friendly, upbeat", "Professional, direct") */
  tone: string;
  
  /** Formality level of communication style */
  formality: string;
  
  /** How they structure and pace their messages */
  pacing: string;
  
  /** Characteristic words and phrases they commonly use */
  vocabulary: string[];
  
  /** Unique communication habits and patterns */
  quirks: string[];
  
  /** Real examples from their actual messages */
  examples: string[];
  
  /** Communication context detected by the system */
  formality_context?: "casual" | "mixed" | "formal";
  
  /**
   * Personality Traits (1-10 scale)
   * 
   * These traits are scored on a scale of 1-10 and capture different
   * aspects of the person's communication personality.
   */
  traits: {
    /** Curiosity and openness to new ideas */
    openness?: number;
    /** Level of emotional expressiveness in communication */
    expressiveness?: number;
    /** Tendency to use humor and wit */
    humor?: number;
    /** Ability to show understanding and compassion */
    empathy?: number;
    /** How direct and straightforward they are */
    directness?: number;
    /** Energy and excitement level in communication */
    enthusiasm?: number;
  };
  
  /**
   * Emotional Context
   * 
   * Captures the emotional patterns and triggers in the person's communication.
   */
  emotions: {
    /** Primary emotional state they typically exhibit */
    primary?: string;
    /** Secondary emotions they show */
    secondary?: string[];
    /** Situations that evoke emotional responses */
    triggers?: {
      /** Topics/situations that make them positive */
      positive?: string[];
      /** Topics/situations that make them negative */
      negative?: string[];
    };
    /** Patterns in their emotional communication */
    mood_patterns?: {
      /** Their typical mood in conversations */
      typical_mood?: string;
      /** Indicators of their current mood */
      mood_indicators?: string[];
      /** Signs of stress or discomfort */
      stress_indicators?: string[];
    };
  };
  
  /**
   * Communication Preferences
   * 
   * Captures what topics they prefer, what they avoid, and how they engage
   * in different types of conversations.
   */
  preferences: {
    /** Topics they enjoy discussing */
    topics?: string[];
    /** Topics or approaches they tend to avoid */
    avoids?: string[];
    /** How they typically engage in conversations */
    engagement?: string[];
    /** How they handle relationship dynamics */
    relationship_dynamics?: {
      /** Their typical position in power dynamics */
      power_position?: string;
      /** How they show trust in relationships */
      trust_indicators?: string[];
      /** How they set and maintain boundaries */
      boundary_style?: string;
    };
    /** Context-specific communication preferences */
    context_preferences?: {
      /** How they communicate in formal settings */
      formal_contexts?: string[];
      /** How they communicate in casual settings */
      casual_contexts?: string[];
      /** How they communicate in work settings */
      work_contexts?: string[];
    };
  };
  
  /**
   * Communication Patterns
   * 
   * Technical aspects of how they structure their messages, including
   * length, punctuation, capitalization, and unique expressions.
   */
  communication_patterns?: {
    /** Typical length of their messages */
    message_length?: string;
    /** How they use punctuation and formatting */
    punctuation_style?: string;
    /** How they use capitalization */
    capitalization?: string;
    /** Abbreviations they commonly use */
    abbreviations?: string[];
    /** Unique expressions or phrases they use */
    unique_expressions?: string[];
  };
}

/**
 * Stored Message Interface
 * 
 * Used for storing messages in localStorage and other persistent storage.
 * Similar to Msg but with optional timestamp for flexibility.
 */
export interface StoredMessage {
  sender: string;
  message: string;
  timestamp?: string;
}

/**
 * Stored Persona Interface
 * 
 * This is the complete data structure for an AI persona that has been
 * created from uploaded conversation data. It contains all the information
 * needed to recreate the person's communication style and maintain
 * conversation context.
 * 
 * This is the primary data structure stored in localStorage and used
 * throughout the application for chat interactions.
 */
export interface StoredPersona {
  /** Unique identifier for the persona */
  id: string;
  
  /** Display name of the persona (usually the person's name) */
  name: string;
  
  /** Complete conversation transcript used for training */
  transcript: Msg[];
  
  /** Ongoing chat conversation history with the user */
  chatHistory: Msg[];
  
  /** AI-generated personality and style profile */
  styleProfile: StyleProfile;
  
  /** Optional avatar image URL for the persona */
  avatar?: string;
  
  /** Optional description of the persona */
  description?: string;
  
  /** Number of messages used to train this persona */
  messageCount?: number;
}

/**
 * Chat Message Interface
 * 
 * Used for displaying messages in the chat interface. This structure
 * is optimized for UI rendering and includes additional metadata
 * like unique IDs and formatted timestamps.
 */
export interface ChatMessage {
  /** Unique identifier for the message */
  id: string;
  
  /** The message content */
  content: string;
  
  /** Who sent the message (user or AI persona) */
  sender: 'user' | 'persona';
  
  /** When the message was sent (Date object for easy formatting) */
  timestamp: Date;
}